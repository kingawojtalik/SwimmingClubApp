@page "/swimminggroups/edit"
@inject SwimmingClubApp.Data.SwimmingClubAppContext DB
@using SwimmingClubApp.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edycja</PageTitle>

<h1>Edycja wybranej grupy pływackiej</h1>

<hr />
@if (SwimmingGroup is null)
{
    <p><em>Wczytywanie...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="SwimmingGroup" OnValidSubmit="UpdateSwimmingGroup" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="SwimmingGroup.SwimmingGroupId" value="@SwimmingGroup.SwimmingGroupId" />
                <div class="mb-3">
                    <label for="name" class="form-label">Nazwa:</label>
                    <InputText id="name" @bind-Value="SwimmingGroup.Name" class="form-control" />
                    <ValidationMessage For="() => SwimmingGroup.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="level" class="form-label">Poziom:</label>
                    <InputSelect id="level" @bind-Value="SwimmingGroup.Level" class="form-control">
                        <option value="">Wybierz poziom grupy pływackiej...</option>
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                    </InputSelect>
                    <ValidationMessage For="() => SwimmingGroup.Level" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Zapisz zmiany</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <br /> <a href="/swimminggroups">Wróć do listy grup pływackich</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int SwimmingGroupId { get; set; }

    [SupplyParameterFromForm]
    public SwimmingGroup? SwimmingGroup { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SwimmingGroup ??= await DB.SwimmingGroups.FirstOrDefaultAsync(m => m.SwimmingGroupId == SwimmingGroupId);

        if (SwimmingGroup is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task UpdateSwimmingGroup()
    {
        DB.Attach(SwimmingGroup!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SwimmingGroupExists(SwimmingGroup!.SwimmingGroupId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/swimminggroups");
    }

    bool SwimmingGroupExists(int swimminggroupid)
    {
        return DB.SwimmingGroups.Any(e => e.SwimmingGroupId == swimminggroupid);
    }
}
