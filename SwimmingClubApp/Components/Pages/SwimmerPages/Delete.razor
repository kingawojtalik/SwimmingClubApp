@page "/swimmers/delete"
@inject SwimmingClubApp.Data.SwimmingClubAppContext DB
@using SwimmingClubApp.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Usuwanie profilu zawodnika</PageTitle>

<h3>Czy na pewno chcesz usunąć wybrany profil zawodnika?</h3>
<div>
    <hr />
    @if (swimmer is null)
    {
        <p><em>Wczytywanie...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Imię</dt>
            <dd class="col-sm-10">@swimmer.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Nazwisko</dt>
            <dd class="col-sm-10">@swimmer.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Data urodzenia</dt>
            <dd class="col-sm-10">@swimmer.BirthDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Płeć</dt>
            <dd class="col-sm-10">@swimmer.Gender</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Grupa pływacka</dt>
            <dd class="col-sm-10">@swimmer.SwimmingGroup.Name</dd>
        </dl>
        <EditForm method="post" Model="swimmer" OnValidSubmit="DeleteSwimmer" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(swimmer is null)">Usuń</button>
            <br /> <br /> <a href="/swimmers">Wróć do listy zawodników</a>
        </EditForm>
    }
</div>

@code {
    Swimmer? swimmer;

    [SupplyParameterFromQuery]
    public int SwimmerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        swimmer = await DB.Swimmers.Include(s => s.SwimmingGroup).FirstOrDefaultAsync(m => m.SwimmerId == SwimmerId);

        if (swimmer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteSwimmer()
    {
        DB.Swimmers.Remove(swimmer!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/swimmers");
    }
}
