@page "/trainings/edit"
@inject SwimmingClubApp.Data.SwimmingClubAppContext DB
@using SwimmingClubApp.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edycja</PageTitle>

<h1>Edycja wybranego treningu</h1>

<hr />
@if (Training is null)
{
    <p><em>Wczytywanie...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Training" OnValidSubmit="UpdateTraining" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Training.TrainingId" value="@Training.TrainingId" />
                <div class="mb-3">
                    <label for="swimminggroupid" class="form-label">Grupa pływacka:</label>
                    <InputSelect id="swimminggroupid" @bind-Value="Training.SwimmingGroupId" class="form-control">
                        <option value="">Wybierz grupę pływacką...</option>
                        @foreach (var swimminggroup in SwimmingGroups)
                        {
                            <option value="@swimminggroup.SwimmingGroupId">@swimminggroup.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Training.SwimmingGroupId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="location" class="form-label">Miejsce:</label>
                    <InputText id="location" @bind-Value="Training.Location" class="form-control" />
                    <ValidationMessage For="() => Training.Location" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="trainingday" class="form-label">Dzień tygodnia:</label>
                    <InputText id="trainingday" @bind-Value="Training.TrainingDay" class="form-control" />
                    <ValidationMessage For="() => Training.TrainingDay" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="trainingtime" class="form-label">Godzina:</label>
                    <InputDate Type="InputDateType.Time" id="trainingtime" @bind-Value="Training.TrainingTime" class="form-control" />
                    <ValidationMessage For="() => Training.TrainingTime" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Zapisz zmiany</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <br /> <a href="/trainings">Wróć do listy treningów</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int TrainingId { get; set; }

    [SupplyParameterFromForm]
    public Training? Training { get; set; }

    List<SwimmingGroup> SwimmingGroups = new List<SwimmingGroup>();

    protected override async Task OnInitializedAsync()
    {
        Training ??= await DB.Trainings.FirstOrDefaultAsync(m => m.TrainingId == TrainingId);

        if (Training is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        
        SwimmingGroups = await DB.SwimmingGroups.ToListAsync();

    }

    public async Task UpdateTraining()
    {
        DB.Attach(Training!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!TrainingExists(Training!.TrainingId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/trainings");
    }

    bool TrainingExists(int trainingid)
    {
        return DB.Trainings.Any(e => e.TrainingId == trainingid);
    }
}
